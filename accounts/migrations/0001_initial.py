# Generated by Django 5.0.6 on 2025-09-07 23:58

import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProviderExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("experience_name", models.CharField(max_length=100)),
                (
                    "experience_month_time",
                    models.FloatField(help_text="Duration in months"),
                ),
                (
                    "experience_company",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "experience_certificate",
                    models.FileField(blank=True, null=True, upload_to="certificates/"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServiceProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "user_role",
                    models.CharField(
                        choices=[
                            ("service_seeker", "Service Seeker"),
                            ("service_provider", "Service Provider"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "user_city",
                    models.CharField(
                        choices=[
                            ("medellin", "Medellin"),
                            ("envigado", "Envigado"),
                            ("bello", "Bello"),
                            ("sabaneta", "Sabaneta"),
                            ("itagui", "Itagui"),
                            ("la_estrella", "La Estrella"),
                            ("caldas", "Caldas"),
                            ("copacabana", "Copacabana"),
                            ("girardota", "Girardota"),
                            ("barbosa", "Barbosa"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "user_verification",
                    models.CharField(
                        choices=[
                            ("verificado", "Verificado"),
                            ("no_verificado", "No Verificado"),
                        ],
                        default="no_verificado",
                        max_length=20,
                    ),
                ),
                ("user_birthdate", models.DateField()),
                ("user_phone", models.CharField(max_length=20)),
                ("user_address", models.CharField(max_length=100)),
                (
                    "user_picture",
                    models.ImageField(blank=True, null=True, upload_to="profiles/"),
                ),
                ("user_score", models.FloatField(blank=True, default=5.0, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
